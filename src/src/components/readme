// **1. Different between class component n class based component **
// I. Class Component:
// Class components were the traditional way of creating React components before functional components and hooks 
// were introduced.
// They are defined as JavaScript classes that extend the React.Component class.
// Class components have a more complex syntax and lifecycle methods that control the component's behavior 
// throughout its lifecycle.
// They can have state managed using this.state and update it using this.setState().
// Lifecycle methods like componentDidMount, componentDidUpdate, and componentWillUnmount are used to manage side effects 
// and state changes.

// II. Functional Component:
// Functional components are simpler and more lightweight than class components.
// They are defined using JavaScript functions and return JSX to describe the component's UI.
// Functional components were enhanced with the introduction of React Hooks, which allow them to manage state and side 
// effects similarly to class components.
// They have become the preferred way of creating components in React due to their simplicity and improved performance.


// **2. functional components**
// functional components are a way to define and create UI elements using JavaScript functions. They are a core concept 
// introduced in React as part of the React Hooks API. Prior to functional components, class components were the primary 
// way of building UI components in React. Functional components have become more popular due to their simplicity and 
// the introduction of hooks, which provide a way to manage state and lifecycle behavior in functional components.


// **3 Pure component and component **
// In React, there are two main types of components: Component and PureComponent. Both of these are used to create UI 
// elements, but they have different behaviors when it comes to rendering and optimizing re-renders.

// I. Component:
// Component is the base class that you extend when creating class-based components in React.
// When a component's state or props change, it will re-render by default. This might lead to unnecessary re-renders, 
// even if the component's output hasn't changed.
// To optimize rendering, you can manually implement shouldComponentUpdate(nextProps, nextState) to prevent re-renders 
// when they are unnecessary. This lifecycle method allows you to control whether the component should update based on 
// the changes in props and state.

// II. PureComponent:
// PureComponent is a subclass of Component that automatically implements a shallow prop and state comparison in its 
// shouldComponentUpdate method.
// This means that if the props and state of a PureComponent have not changed shallowly, it won't re-render. This can 
// provide a performance boost by avoiding unnecessary renders when the data hasn't changed.
// It's important to note that the shallow comparison might not be suitable for all scenarios, such as when working 
// with complex data structures or deeply nested objects.


// **4. What is use memo when to use it**
// useMemo is a React hook that is used to optimize the performance of functional components by memoizing the result 
// of a function or an expression. It allows you to cache the computed value of a function so that it is only recalculated 
// when its dependencies change. This can help reduce unnecessary re-computations and re-renders 
// in your component.


// **5. Unknown event in functional component**
// In React functional components, there's no such thing as an "unknown event." React components use well-defined 
// events that correspond to HTML events. If you're encountering an issue related to events in a functional component, 
// it might be due to a typo, missing import, or some other issue that's causing the event to not be recognized properly.


// **6. Prop DRELLING method in react**
// Prop Drilling is a term used in React to describe a situation where props are passed down through multiple layers 
// of components in a component tree to reach a deeply nested component that needs access to those props. 
// This can lead to code that is harder to maintain and understand, as well as potential performance issues.


// **7. CONTEXT API**
// The React Context API allows you to manage and share state between components without prop drilling. It provides a 
// way to create global state that can be accessed by components at any level in the component tree.


// **8. control and uncontrol component **

// I. Controlled Components:
// A controlled component is a form element whose value is controlled by React's state. This means that the 
// component's value is stored in the state, and any changes to the component are reflected in the state and vice 
// versa. This approach gives you full control over the form element's behavior and allows you to validate and 
// manipulate its value before rendering.

// II. Uncontrolled Components:
// An uncontrolled component is a form element whose value is handled by the DOM itself. In this case, React doesn't 
// control the value directly; instead, you rely on DOM events to read the value when needed. Uncontrolled components 
// are useful when you want to integrate React with non-React code or need to avoid unnecessary re-renders.


// **9. Parent component n child component**

// I. Parent Component:
// In React, a parent component is a component that renders other components within it. It's responsible for managing the 
// state and passing down data and props to its child components. Parent components are often higher-level components that 
// provide structure and logic to the application.

// II. Child Component:
// A child component in React is a component that's rendered within another component (the parent component). Child 
// components receive data and functionality from their parent through props. They're often used to break down complex 
// UIs into smaller, reusable pieces, making the code more organized and maintainable.


// **10. higher-order component**
// A higher-order component is a design pattern used to enhance or modify the behavior of a component by wrapping it 
// with another component. HOCs are not specific to parent-child relationships but are a way to reuse component logic 
// across different components.


// **11. Event bubbling**
// Event bubbling is a concept in React where when an event is triggered on a nested or child element, the event is 
// first handled by that element's event handler, and then it "bubbles up" to the parent elements, triggering their 
// event handlers as well. In React, events work similarly to how they work in the DOM, and the concept of event bubbling 
// applies.


// **12. Deep copy n shallow copy difference**

// I. Shallow Copy:
// A shallow copy creates a new object or array, but the inner elements of the new object still reference the same 
// elements as the original. In other words, the top-level structure is copied, but the nested structures are shared 
// between the original and the copied object.

// II. Deep Copy:
// A deep copy creates an entirely new object or array and recursively copies all nested elements, so they are 
// independent of the original object's elements. Deep copies ensure that changes made to the copied object don't 
// affect the original object.

// Deep copy is more complex to implement, and in React, you might use libraries like Lodash's cloneDeep or the 
// JSON.parse(JSON.stringify()) method for deep copying.


// **13. Call apply n bind**
// In JavaScript, the call, apply, and bind methods are used to manipulate the value of this within a function. 
// They are not specific to React but are general JavaScript concepts. However, you might use these methods in 
// React when dealing with event handlers, custom functions, or callbacks.

// I. call:
// The call method allows you to invoke a function with a specific this context and arguments provided individually.

// II. apply:
// The apply method is similar to call, but it allows you to pass arguments as an array.

// III. bind:
// The bind method creates a new function with a fixed this context and optionally some initial arguments. 
// It's often used to create functions that can be passed around without losing their context.


// **14. Map reduce filter**
// In React map, reduce, and filter are higher-order array methods used to manipulate arrays in different ways. They 
// are not specific to React but are commonly used when working with data in React components. 

// I. map:
// The map method is used to create a new array by applying a function to each element of the original array.

// II. filter:
// The filter method is used to create a new array containing elements that satisfy a certain condition.

// III. reduce:
// The reduce method is used to accumulate values from an array into a single value. It takes a function that performs 
// the reduction and an initial value.


// **15. closures**
// In React, closures can be seen in situations where functions are defined within other functions, such as event 
// handlers and callbacks. When a function is defined within another function, it forms a closure, which means it 
// retains access to the variables of its parent function even after the parent function has completed execution.


// **Version Codes**
// React itself doesn't have a version code, but rather, it's a library with its own version that you install using 
// npm or yarn. When you create a new React application using create-react-app or set up a project with React manually, 
// the version of React is determined by the version specified in your package.json file. Here's an example of what 
// the dependencies section of your package.json might look like for React:

// **Third Party Payment Gateway**
// Integrating a third-party payment gateway into a React application involves a few steps. Payment gateways 
// allow you to securely process online payments and manage transactions. Here's a general outline of the process:
// 1. Choose a Payment Gateway:
// => Select a payment gateway provider that suits your needs. Some popular options include Stripe, PayPal, Square, 
//    Braintree, and many others. Each gateway has its own documentation and APIs to facilitate integration.
// 2. Sign Up and Get API Keys:
// => Once you've chosen a payment gateway, sign up for an account on their platform. After registration, you'll usually 
//    get API keys or credentials that you'll need to use to interact with their services programmatically.
// 3. Install SDK or Client Library:
// => Most payment gateways provide client libraries or SDKs for different programming languages, including 
//    JavaScript for web applications. For React, you'll likely be using JavaScript-based SDKs.
// 4. Implement Payment Flows:
// => Depending on your use case, you'll need to implement various payment flows such as one-time payments, 
//    subscriptions, or recurring payments. This usually involves creating UI components for collecting payment 
//    information (credit card details, billing address, etc.) and integrating the appropriate API calls.
// 5. Handle Server-side Processing (Optional but Recommended):
// => While some payment gateways offer client-side-only integration, it's often recommended to perform server-side 
//    processing to enhance security and prevent sensitive data from being exposed to the client. Set up server endpoints 
//    that communicate with the payment gateway using your API keys.
// 6. Test in a Sandbox Environment:
// => Most payment gateways provide sandbox or test environments where you can simulate transactions without real 
//    money. Use these environments to ensure your integration works as expected before going live.
// 7. Handle Responses and Errors:
// => Implement logic to handle responses and errors returned by the payment gateway. You'll need to update your UI to 
//    display success or failure messages accordingly.


// **ES6 Features **
// ** Different Between == and === **